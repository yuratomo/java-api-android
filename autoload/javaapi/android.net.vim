call javaapi#namespace('android.net')

call javaapi#class('ConnectivityManager', '', [
  \ javaapi#field(1,1,'CONNECTIVITY_ACTION', 'String'),
  \ javaapi#field(1,1,'EXTRA_NETWORK_INFO', 'String'),
  \ javaapi#field(1,1,'EXTRA_NETWORK_TYPE', 'String'),
  \ javaapi#field(1,1,'EXTRA_IS_FAILOVER', 'String'),
  \ javaapi#field(1,1,'EXTRA_OTHER_NETWORK_INFO', 'String'),
  \ javaapi#field(1,1,'EXTRA_NO_CONNECTIVITY', 'String'),
  \ javaapi#field(1,1,'EXTRA_REASON', 'String'),
  \ javaapi#field(1,1,'EXTRA_EXTRA_INFO', 'String'),
  \ javaapi#field(1,1,'ACTION_BACKGROUND_DATA_SETTING_CHANGED', 'String'),
  \ javaapi#field(1,1,'TYPE_MOBILE', 'int'),
  \ javaapi#field(1,1,'TYPE_WIFI', 'int'),
  \ javaapi#field(1,1,'TYPE_MOBILE_MMS', 'int'),
  \ javaapi#field(1,1,'TYPE_MOBILE_SUPL', 'int'),
  \ javaapi#field(1,1,'TYPE_MOBILE_DUN', 'int'),
  \ javaapi#field(1,1,'TYPE_MOBILE_HIPRI', 'int'),
  \ javaapi#field(1,1,'TYPE_WIMAX', 'int'),
  \ javaapi#field(1,1,'TYPE_BLUETOOTH', 'int'),
  \ javaapi#field(1,1,'TYPE_DUMMY', 'int'),
  \ javaapi#field(1,1,'TYPE_ETHERNET', 'int'),
  \ javaapi#field(1,1,'DEFAULT_NETWORK_PREFERENCE', 'int'),
  \ javaapi#method(1,1,'isNetworkTypeValid(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'setNetworkPreference(', 'int)', 'void'),
  \ javaapi#method(0,1,'getNetworkPreference(', ')', 'int'),
  \ javaapi#method(0,1,'getActiveNetworkInfo(', ')', 'NetworkInfo'),
  \ javaapi#method(0,1,'getNetworkInfo(', 'int)', 'NetworkInfo'),
  \ javaapi#method(0,1,'getAllNetworkInfo(', ')', 'NetworkInfo'),
  \ javaapi#method(0,1,'startUsingNetworkFeature(', 'int, String)', 'int'),
  \ javaapi#method(0,1,'stopUsingNetworkFeature(', 'int, String)', 'int'),
  \ javaapi#method(0,1,'requestRouteToHost(', 'int, int)', 'boolean'),
  \ javaapi#method(0,1,'getBackgroundDataSetting(', ')', 'boolean'),
  \ javaapi#method(0,1,'isActiveNetworkMetered(', ')', 'boolean'),
  \ ])

call javaapi#class('LocalServerSocket', '', [
  \ javaapi#method(0,1,'LocalServerSocket(', 'String) throws IOException', ''),
  \ javaapi#method(0,1,'LocalServerSocket(', 'FileDescriptor) throws IOException', ''),
  \ javaapi#method(0,1,'getLocalSocketAddress(', ')', 'LocalSocketAddress'),
  \ javaapi#method(0,1,'accept(', ') throws IOException', 'LocalSocket'),
  \ javaapi#method(0,1,'getFileDescriptor(', ')', 'FileDescriptor'),
  \ javaapi#method(0,1,'close(', ') throws IOException', 'void'),
  \ ])

call javaapi#class('DhcpInfo', 'Parcelable', [
  \ javaapi#field(0,1,'ipAddress', 'int'),
  \ javaapi#field(0,1,'gateway', 'int'),
  \ javaapi#field(0,1,'netmask', 'int'),
  \ javaapi#field(0,1,'dns1', 'int'),
  \ javaapi#field(0,1,'dns2', 'int'),
  \ javaapi#field(0,1,'serverAddress', 'int'),
  \ javaapi#field(0,1,'leaseDuration', 'int'),
  \ javaapi#method(0,1,'DhcpInfo(', ')', ''),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'describeContents(', ')', 'int'),
  \ javaapi#method(0,1,'writeToParcel(', 'Parcel, int)', 'void'),
  \ ])

call javaapi#namespace('android.net')

call javaapi#class('VpnService', 'Service', [
  \ javaapi#field(1,1,'SERVICE_INTERFACE', 'String'),
  \ javaapi#method(0,1,'VpnService(', ')', ''),
  \ javaapi#method(1,1,'prepare(', 'Context)', 'Intent'),
  \ javaapi#method(0,1,'protect(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'protect(', 'Socket)', 'boolean'),
  \ javaapi#method(0,1,'protect(', 'DatagramSocket)', 'boolean'),
  \ javaapi#method(0,1,'onBind(', 'Intent)', 'IBinder'),
  \ javaapi#method(0,1,'onRevoke(', ')', 'void'),
  \ ])

call javaapi#class('LocalSocket', 'Closeable', [
  \ javaapi#method(0,1,'LocalSocket(', ')', ''),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'connect(', 'LocalSocketAddress) throws IOException', 'void'),
  \ javaapi#method(0,1,'bind(', 'LocalSocketAddress) throws IOException', 'void'),
  \ javaapi#method(0,1,'getLocalSocketAddress(', ')', 'LocalSocketAddress'),
  \ javaapi#method(0,1,'getInputStream(', ') throws IOException', 'InputStream'),
  \ javaapi#method(0,1,'getOutputStream(', ') throws IOException', 'OutputStream'),
  \ javaapi#method(0,1,'close(', ') throws IOException', 'void'),
  \ javaapi#method(0,1,'shutdownInput(', ') throws IOException', 'void'),
  \ javaapi#method(0,1,'shutdownOutput(', ') throws IOException', 'void'),
  \ javaapi#method(0,1,'setReceiveBufferSize(', 'int) throws IOException', 'void'),
  \ javaapi#method(0,1,'getReceiveBufferSize(', ') throws IOException', 'int'),
  \ javaapi#method(0,1,'setSoTimeout(', 'int) throws IOException', 'void'),
  \ javaapi#method(0,1,'getSoTimeout(', ') throws IOException', 'int'),
  \ javaapi#method(0,1,'setSendBufferSize(', 'int) throws IOException', 'void'),
  \ javaapi#method(0,1,'getSendBufferSize(', ') throws IOException', 'int'),
  \ javaapi#method(0,1,'getRemoteSocketAddress(', ')', 'LocalSocketAddress'),
  \ javaapi#method(0,1,'isConnected(', ')', 'boolean'),
  \ javaapi#method(0,1,'isClosed(', ')', 'boolean'),
  \ javaapi#method(0,1,'isBound(', ')', 'boolean'),
  \ javaapi#method(0,1,'isOutputShutdown(', ')', 'boolean'),
  \ javaapi#method(0,1,'isInputShutdown(', ')', 'boolean'),
  \ javaapi#method(0,1,'connect(', 'LocalSocketAddress, int) throws IOException', 'void'),
  \ javaapi#method(0,1,'setFileDescriptorsForSend(', 'FileDescriptor[])', 'void'),
  \ javaapi#method(0,1,'getAncillaryFileDescriptors(', ') throws IOException', 'FileDescriptor'),
  \ javaapi#method(0,1,'getPeerCredentials(', ') throws IOException', 'Credentials'),
  \ javaapi#method(0,1,'getFileDescriptor(', ')', 'FileDescriptor'),
  \ ])

call javaapi#namespace('android.net')

call javaapi#class('LocalSocketAddress', '', [
  \ javaapi#method(0,1,'LocalSocketAddress(', 'String, Namespace)', ''),
  \ javaapi#method(0,1,'LocalSocketAddress(', 'String)', ''),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'getNamespace(', ')', 'Namespace'),
  \ ])

call javaapi#namespace('android.net')

call javaapi#class('NetworkInfo', 'Parcelable', [
  \ javaapi#method(0,1,'getType(', ')', 'int'),
  \ javaapi#method(0,1,'getSubtype(', ')', 'int'),
  \ javaapi#method(0,1,'getTypeName(', ')', 'String'),
  \ javaapi#method(0,1,'getSubtypeName(', ')', 'String'),
  \ javaapi#method(0,1,'isConnectedOrConnecting(', ')', 'boolean'),
  \ javaapi#method(0,1,'isConnected(', ')', 'boolean'),
  \ javaapi#method(0,1,'isAvailable(', ')', 'boolean'),
  \ javaapi#method(0,1,'isFailover(', ')', 'boolean'),
  \ javaapi#method(0,1,'isRoaming(', ')', 'boolean'),
  \ javaapi#method(0,1,'getState(', ')', 'State'),
  \ javaapi#method(0,1,'getDetailedState(', ')', 'DetailedState'),
  \ javaapi#method(0,1,'getReason(', ')', 'String'),
  \ javaapi#method(0,1,'getExtraInfo(', ')', 'String'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'describeContents(', ')', 'int'),
  \ javaapi#method(0,1,'writeToParcel(', 'Parcel, int)', 'void'),
  \ ])

call javaapi#class('TrafficStats', '', [
  \ javaapi#field(1,1,'UNSUPPORTED', 'int'),
  \ javaapi#method(0,1,'TrafficStats(', ')', ''),
  \ javaapi#method(1,1,'setThreadStatsTag(', 'int)', 'void'),
  \ javaapi#method(1,1,'getThreadStatsTag(', ')', 'int'),
  \ javaapi#method(1,1,'clearThreadStatsTag(', ')', 'void'),
  \ javaapi#method(1,1,'tagSocket(', 'Socket) throws SocketException', 'void'),
  \ javaapi#method(1,1,'untagSocket(', 'Socket) throws SocketException', 'void'),
  \ javaapi#method(1,1,'incrementOperationCount(', 'int)', 'void'),
  \ javaapi#method(1,1,'incrementOperationCount(', 'int, int)', 'void'),
  \ javaapi#method(1,1,'getMobileTxPackets(', ')', 'long'),
  \ javaapi#method(1,1,'getMobileRxPackets(', ')', 'long'),
  \ javaapi#method(1,1,'getMobileTxBytes(', ')', 'long'),
  \ javaapi#method(1,1,'getMobileRxBytes(', ')', 'long'),
  \ javaapi#method(1,1,'getTotalTxPackets(', ')', 'long'),
  \ javaapi#method(1,1,'getTotalRxPackets(', ')', 'long'),
  \ javaapi#method(1,1,'getTotalTxBytes(', ')', 'long'),
  \ javaapi#method(1,1,'getTotalRxBytes(', ')', 'long'),
  \ javaapi#method(1,1,'getUidTxBytes(', 'int)', 'long'),
  \ javaapi#method(1,1,'getUidRxBytes(', 'int)', 'long'),
  \ javaapi#method(1,1,'getUidTxPackets(', 'int)', 'long'),
  \ javaapi#method(1,1,'getUidRxPackets(', 'int)', 'long'),
  \ javaapi#method(1,1,'getUidTcpTxBytes(', 'int)', 'long'),
  \ javaapi#method(1,1,'getUidTcpRxBytes(', 'int)', 'long'),
  \ javaapi#method(1,1,'getUidUdpTxBytes(', 'int)', 'long'),
  \ javaapi#method(1,1,'getUidUdpRxBytes(', 'int)', 'long'),
  \ javaapi#method(1,1,'getUidTcpTxSegments(', 'int)', 'long'),
  \ javaapi#method(1,1,'getUidTcpRxSegments(', 'int)', 'long'),
  \ javaapi#method(1,1,'getUidUdpTxPackets(', 'int)', 'long'),
  \ javaapi#method(1,1,'getUidUdpRxPackets(', 'int)', 'long'),
  \ ])

call javaapi#class('Uri', 'Comparable', [
  \ javaapi#field(1,1,'EMPTY', 'Uri'),
  \ javaapi#field(1,1,'CREATOR', 'Creator'),
  \ javaapi#method(0,1,'isHierarchical(', ')', 'boolean'),
  \ javaapi#method(0,1,'isOpaque(', ')', 'boolean'),
  \ javaapi#method(0,1,'isRelative(', ')', 'boolean'),
  \ javaapi#method(0,1,'isAbsolute(', ')', 'boolean'),
  \ javaapi#method(0,1,'getScheme(', ')', 'String'),
  \ javaapi#method(0,1,'getSchemeSpecificPart(', ')', 'String'),
  \ javaapi#method(0,1,'getEncodedSchemeSpecificPart(', ')', 'String'),
  \ javaapi#method(0,1,'getAuthority(', ')', 'String'),
  \ javaapi#method(0,1,'getEncodedAuthority(', ')', 'String'),
  \ javaapi#method(0,1,'getUserInfo(', ')', 'String'),
  \ javaapi#method(0,1,'getEncodedUserInfo(', ')', 'String'),
  \ javaapi#method(0,1,'getHost(', ')', 'String'),
  \ javaapi#method(0,1,'getPort(', ')', 'int'),
  \ javaapi#method(0,1,'getPath(', ')', 'String'),
  \ javaapi#method(0,1,'getEncodedPath(', ')', 'String'),
  \ javaapi#method(0,1,'getQuery(', ')', 'String'),
  \ javaapi#method(0,1,'getEncodedQuery(', ')', 'String'),
  \ javaapi#method(0,1,'getFragment(', ')', 'String'),
  \ javaapi#method(0,1,'getEncodedFragment(', ')', 'String'),
  \ javaapi#method(0,1,'getPathSegments(', ')', 'List'),
  \ javaapi#method(0,1,'getLastPathSegment(', ')', 'String'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'hashCode(', ')', 'int'),
  \ javaapi#method(0,1,'compareTo(', 'Uri)', 'int'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'buildUpon(', ')', 'Builder'),
  \ javaapi#method(1,1,'parse(', 'String)', 'Uri'),
  \ javaapi#method(1,1,'fromFile(', 'File)', 'Uri'),
  \ javaapi#method(1,1,'fromParts(', 'String, String, String)', 'Uri'),
  \ javaapi#method(0,1,'getQueryParameterNames(', ')', 'Set'),
  \ javaapi#method(0,1,'getQueryParameters(', 'String)', 'List'),
  \ javaapi#method(0,1,'getQueryParameter(', 'String)', 'String'),
  \ javaapi#method(0,1,'getBooleanQueryParameter(', 'String, boolean)', 'boolean'),
  \ javaapi#method(0,1,'normalizeScheme(', ')', 'Uri'),
  \ javaapi#method(1,1,'writeToParcel(', 'Parcel, Uri)', 'void'),
  \ javaapi#method(1,1,'encode(', 'String)', 'String'),
  \ javaapi#method(1,1,'encode(', 'String, String)', 'String'),
  \ javaapi#method(1,1,'decode(', 'String)', 'String'),
  \ javaapi#method(1,1,'withAppendedPath(', 'Uri, String)', 'Uri'),
  \ javaapi#method(0,1,'compareTo(', 'Object)', 'int'),
  \ ])

call javaapi#class('MailTo', '', [
  \ javaapi#field(1,1,'MAILTO_SCHEME', 'String'),
  \ javaapi#method(1,1,'isMailTo(', 'String)', 'boolean'),
  \ javaapi#method(1,1,'parse(', 'String) throws ParseException', 'MailTo'),
  \ javaapi#method(0,1,'getTo(', ')', 'String'),
  \ javaapi#method(0,1,'getCc(', ')', 'String'),
  \ javaapi#method(0,1,'getSubject(', ')', 'String'),
  \ javaapi#method(0,1,'getBody(', ')', 'String'),
  \ javaapi#method(0,1,'getHeaders(', ')', 'String>'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('SSLCertificateSocketFactory', 'SSLSocketFactory', [
  \ javaapi#method(0,1,'SSLCertificateSocketFactory(', 'int)', ''),
  \ javaapi#method(1,1,'getDefault(', 'int)', 'SocketFactory'),
  \ javaapi#method(1,1,'getDefault(', 'int, SSLSessionCache)', 'SSLSocketFactory'),
  \ javaapi#method(1,1,'getInsecure(', 'int, SSLSessionCache)', 'SSLSocketFactory'),
  \ javaapi#method(1,1,'getHttpSocketFactory(', 'int, SSLSessionCache)', 'SSLSocketFactory'),
  \ javaapi#method(0,1,'setTrustManagers(', 'TrustManager[])', 'void'),
  \ javaapi#method(0,1,'setNpnProtocols(', 'byte[][])', 'void'),
  \ javaapi#method(0,1,'getNpnSelectedProtocol(', 'Socket)', 'byte'),
  \ javaapi#method(0,1,'setKeyManagers(', 'KeyManager[])', 'void'),
  \ javaapi#method(0,1,'setUseSessionTickets(', 'Socket, boolean)', 'void'),
  \ javaapi#method(0,1,'setHostname(', 'Socket, String)', 'void'),
  \ javaapi#method(0,1,'createSocket(', 'Socket, String, int, boolean) throws IOException', 'Socket'),
  \ javaapi#method(0,1,'createSocket(', ') throws IOException', 'Socket'),
  \ javaapi#method(0,1,'createSocket(', 'InetAddress, int, InetAddress, int) throws IOException', 'Socket'),
  \ javaapi#method(0,1,'createSocket(', 'InetAddress, int) throws IOException', 'Socket'),
  \ javaapi#method(0,1,'createSocket(', 'String, int, InetAddress, int) throws IOException', 'Socket'),
  \ javaapi#method(0,1,'createSocket(', 'String, int) throws IOException', 'Socket'),
  \ javaapi#method(0,1,'getDefaultCipherSuites(', ')', 'String'),
  \ javaapi#method(0,1,'getSupportedCipherSuites(', ')', 'String'),
  \ ])

call javaapi#class('Proxy', '', [
  \ javaapi#field(1,1,'PROXY_CHANGE_ACTION', 'String'),
  \ javaapi#method(0,1,'Proxy(', ')', ''),
  \ javaapi#method(1,1,'getHost(', 'Context)', 'String'),
  \ javaapi#method(1,1,'getPort(', 'Context)', 'int'),
  \ javaapi#method(1,1,'getDefaultHost(', ')', 'String'),
  \ javaapi#method(1,1,'getDefaultPort(', ')', 'int'),
  \ ])

call javaapi#class('SSLSessionCache', '', [
  \ javaapi#method(0,1,'SSLSessionCache(', 'File) throws IOException', ''),
  \ javaapi#method(0,1,'SSLSessionCache(', 'Context)', ''),
  \ ])

call javaapi#class('ParseException', 'RuntimeException', [
  \ javaapi#field(0,1,'response', 'String'),
  \ ])

call javaapi#class('Credentials', '', [
  \ javaapi#method(0,1,'Credentials(', 'int, int, int)', ''),
  \ javaapi#method(0,1,'getPid(', ')', 'int'),
  \ javaapi#method(0,1,'getUid(', ')', 'int'),
  \ javaapi#method(0,1,'getGid(', ')', 'int'),
  \ ])

call javaapi#class('UrlQuerySanitizer', '', [
  \ javaapi#method(0,1,'UrlQuerySanitizer(', ')', ''),
  \ javaapi#method(0,1,'UrlQuerySanitizer(', 'String)', ''),
  \ javaapi#method(0,1,'getUnregisteredParameterValueSanitizer(', ')', 'ValueSanitizer'),
  \ javaapi#method(0,1,'setUnregisteredParameterValueSanitizer(', 'ValueSanitizer)', 'void'),
  \ javaapi#method(1,1,'getAllIllegal(', ')', 'ValueSanitizer'),
  \ javaapi#method(1,1,'getAllButNulLegal(', ')', 'ValueSanitizer'),
  \ javaapi#method(1,1,'getAllButWhitespaceLegal(', ')', 'ValueSanitizer'),
  \ javaapi#method(1,1,'getUrlLegal(', ')', 'ValueSanitizer'),
  \ javaapi#method(1,1,'getUrlAndSpaceLegal(', ')', 'ValueSanitizer'),
  \ javaapi#method(1,1,'getAmpLegal(', ')', 'ValueSanitizer'),
  \ javaapi#method(1,1,'getAmpAndSpaceLegal(', ')', 'ValueSanitizer'),
  \ javaapi#method(1,1,'getSpaceLegal(', ')', 'ValueSanitizer'),
  \ javaapi#method(1,1,'getAllButNulAndAngleBracketsLegal(', ')', 'ValueSanitizer'),
  \ javaapi#method(0,1,'parseUrl(', 'String)', 'void'),
  \ javaapi#method(0,1,'parseQuery(', 'String)', 'void'),
  \ javaapi#method(0,1,'getParameterSet(', ')', 'Set'),
  \ javaapi#method(0,1,'getParameterList(', ')', 'List'),
  \ javaapi#method(0,1,'hasParameter(', 'String)', 'boolean'),
  \ javaapi#method(0,1,'getValue(', 'String)', 'String'),
  \ javaapi#method(0,1,'registerParameter(', 'String, ValueSanitizer)', 'void'),
  \ javaapi#method(0,1,'registerParameters(', 'String[], ValueSanitizer)', 'void'),
  \ javaapi#method(0,1,'setAllowUnregisteredParamaters(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getAllowUnregisteredParamaters(', ')', 'boolean'),
  \ javaapi#method(0,1,'setPreferFirstRepeatedParameter(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getPreferFirstRepeatedParameter(', ')', 'boolean'),
  \ javaapi#method(0,0,'parseEntry(', 'String, String)', 'void'),
  \ javaapi#method(0,0,'addSanitizedEntry(', 'String, String)', 'void'),
  \ javaapi#method(0,1,'getValueSanitizer(', 'String)', 'ValueSanitizer'),
  \ javaapi#method(0,1,'getEffectiveValueSanitizer(', 'String)', 'ValueSanitizer'),
  \ javaapi#method(0,1,'unescape(', 'String)', 'String'),
  \ javaapi#method(0,0,'isHexDigit(', 'char)', 'boolean'),
  \ javaapi#method(0,0,'decodeHexDigit(', 'char)', 'int'),
  \ javaapi#method(0,0,'clear(', ')', 'void'),
  \ ])

