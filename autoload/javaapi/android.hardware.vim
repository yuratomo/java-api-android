call javaapi#namespace('android.hardware')

call javaapi#class('Sensor', '', [
  \ javaapi#field(1,1,'TYPE_ACCELEROMETER', 'int'),
  \ javaapi#field(1,1,'TYPE_MAGNETIC_FIELD', 'int'),
  \ javaapi#field(1,1,'TYPE_ORIENTATION', 'int'),
  \ javaapi#field(1,1,'TYPE_GYROSCOPE', 'int'),
  \ javaapi#field(1,1,'TYPE_LIGHT', 'int'),
  \ javaapi#field(1,1,'TYPE_PRESSURE', 'int'),
  \ javaapi#field(1,1,'TYPE_TEMPERATURE', 'int'),
  \ javaapi#field(1,1,'TYPE_PROXIMITY', 'int'),
  \ javaapi#field(1,1,'TYPE_GRAVITY', 'int'),
  \ javaapi#field(1,1,'TYPE_LINEAR_ACCELERATION', 'int'),
  \ javaapi#field(1,1,'TYPE_ROTATION_VECTOR', 'int'),
  \ javaapi#field(1,1,'TYPE_RELATIVE_HUMIDITY', 'int'),
  \ javaapi#field(1,1,'TYPE_AMBIENT_TEMPERATURE', 'int'),
  \ javaapi#field(1,1,'TYPE_ALL', 'int'),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'getVendor(', ')', 'String'),
  \ javaapi#method(0,1,'getType(', ')', 'int'),
  \ javaapi#method(0,1,'getVersion(', ')', 'int'),
  \ javaapi#method(0,1,'getMaximumRange(', ')', 'float'),
  \ javaapi#method(0,1,'getResolution(', ')', 'float'),
  \ javaapi#method(0,1,'getPower(', ')', 'float'),
  \ javaapi#method(0,1,'getMinDelay(', ')', 'int'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('Camera', '', [
  \ javaapi#field(1,1,'ACTION_NEW_PICTURE', 'String'),
  \ javaapi#field(1,1,'ACTION_NEW_VIDEO', 'String'),
  \ javaapi#field(1,1,'CAMERA_ERROR_UNKNOWN', 'int'),
  \ javaapi#field(1,1,'CAMERA_ERROR_SERVER_DIED', 'int'),
  \ javaapi#method(1,1,'getNumberOfCameras(', ')', 'int'),
  \ javaapi#method(1,1,'getCameraInfo(', 'int, CameraInfo)', 'void'),
  \ javaapi#method(1,1,'open(', 'int)', 'Camera'),
  \ javaapi#method(1,1,'open(', ')', 'Camera'),
  \ javaapi#method(0,0,'finalize(', ')', 'void'),
  \ javaapi#method(0,1,'release(', ')', 'void'),
  \ javaapi#method(0,1,'unlock(', ')', 'void'),
  \ javaapi#method(0,1,'lock(', ')', 'void'),
  \ javaapi#method(0,1,'reconnect(', ') throws IOException', 'void'),
  \ javaapi#method(0,1,'setPreviewDisplay(', 'SurfaceHolder) throws IOException', 'void'),
  \ javaapi#method(0,1,'setPreviewTexture(', 'SurfaceTexture) throws IOException', 'void'),
  \ javaapi#method(0,1,'startPreview(', ')', 'void'),
  \ javaapi#method(0,1,'stopPreview(', ')', 'void'),
  \ javaapi#method(0,1,'setPreviewCallback(', 'PreviewCallback)', 'void'),
  \ javaapi#method(0,1,'setOneShotPreviewCallback(', 'PreviewCallback)', 'void'),
  \ javaapi#method(0,1,'setPreviewCallbackWithBuffer(', 'PreviewCallback)', 'void'),
  \ javaapi#method(0,1,'addCallbackBuffer(', 'byte[])', 'void'),
  \ javaapi#method(0,1,'autoFocus(', 'AutoFocusCallback)', 'void'),
  \ javaapi#method(0,1,'cancelAutoFocus(', ')', 'void'),
  \ javaapi#method(0,1,'setAutoFocusMoveCallback(', 'AutoFocusMoveCallback)', 'void'),
  \ javaapi#method(0,1,'takePicture(', 'ShutterCallback, PictureCallback, PictureCallback)', 'void'),
  \ javaapi#method(0,1,'takePicture(', 'ShutterCallback, PictureCallback, PictureCallback, PictureCallback)', 'void'),
  \ javaapi#method(0,1,'startSmoothZoom(', 'int)', 'void'),
  \ javaapi#method(0,1,'stopSmoothZoom(', ')', 'void'),
  \ javaapi#method(0,1,'setDisplayOrientation(', 'int)', 'void'),
  \ javaapi#method(0,1,'enableShutterSound(', 'boolean)', 'boolean'),
  \ javaapi#method(0,1,'setZoomChangeListener(', 'OnZoomChangeListener)', 'void'),
  \ javaapi#method(0,1,'setFaceDetectionListener(', 'FaceDetectionListener)', 'void'),
  \ javaapi#method(0,1,'startFaceDetection(', ')', 'void'),
  \ javaapi#method(0,1,'stopFaceDetection(', ')', 'void'),
  \ javaapi#method(0,1,'setErrorCallback(', 'ErrorCallback)', 'void'),
  \ javaapi#method(0,1,'setParameters(', 'Parameters)', 'void'),
  \ javaapi#method(0,1,'getParameters(', ')', 'Parameters'),
  \ ])

call javaapi#interface('SensorEventListener', '', [
  \ javaapi#method(0,1,'onSensorChanged(', 'SensorEvent)', 'void'),
  \ javaapi#method(0,1,'onAccuracyChanged(', 'Sensor, int)', 'void'),
  \ ])

call javaapi#class('SensorEvent', '', [
  \ javaapi#field(0,1,'values', 'float'),
  \ javaapi#field(0,1,'sensor', 'Sensor'),
  \ javaapi#field(0,1,'accuracy', 'int'),
  \ javaapi#field(0,1,'timestamp', 'long'),
  \ ])

call javaapi#namespace('android.hardware')

call javaapi#interface('SensorListener', '', [
  \ javaapi#method(0,1,'onSensorChanged(', 'int, float[])', 'void'),
  \ javaapi#method(0,1,'onAccuracyChanged(', 'int, int)', 'void'),
  \ ])

call javaapi#namespace('android.hardware')

call javaapi#class('SensorManager', '', [
  \ javaapi#field(1,1,'SENSOR_ORIENTATION', 'int'),
  \ javaapi#field(1,1,'SENSOR_ACCELEROMETER', 'int'),
  \ javaapi#field(1,1,'SENSOR_TEMPERATURE', 'int'),
  \ javaapi#field(1,1,'SENSOR_MAGNETIC_FIELD', 'int'),
  \ javaapi#field(1,1,'SENSOR_LIGHT', 'int'),
  \ javaapi#field(1,1,'SENSOR_PROXIMITY', 'int'),
  \ javaapi#field(1,1,'SENSOR_TRICORDER', 'int'),
  \ javaapi#field(1,1,'SENSOR_ORIENTATION_RAW', 'int'),
  \ javaapi#field(1,1,'SENSOR_ALL', 'int'),
  \ javaapi#field(1,1,'SENSOR_MIN', 'int'),
  \ javaapi#field(1,1,'SENSOR_MAX', 'int'),
  \ javaapi#field(1,1,'DATA_X', 'int'),
  \ javaapi#field(1,1,'DATA_Y', 'int'),
  \ javaapi#field(1,1,'DATA_Z', 'int'),
  \ javaapi#field(1,1,'RAW_DATA_INDEX', 'int'),
  \ javaapi#field(1,1,'RAW_DATA_X', 'int'),
  \ javaapi#field(1,1,'RAW_DATA_Y', 'int'),
  \ javaapi#field(1,1,'RAW_DATA_Z', 'int'),
  \ javaapi#field(1,1,'STANDARD_GRAVITY', 'float'),
  \ javaapi#field(1,1,'GRAVITY_SUN', 'float'),
  \ javaapi#field(1,1,'GRAVITY_MERCURY', 'float'),
  \ javaapi#field(1,1,'GRAVITY_VENUS', 'float'),
  \ javaapi#field(1,1,'GRAVITY_EARTH', 'float'),
  \ javaapi#field(1,1,'GRAVITY_MOON', 'float'),
  \ javaapi#field(1,1,'GRAVITY_MARS', 'float'),
  \ javaapi#field(1,1,'GRAVITY_JUPITER', 'float'),
  \ javaapi#field(1,1,'GRAVITY_SATURN', 'float'),
  \ javaapi#field(1,1,'GRAVITY_URANUS', 'float'),
  \ javaapi#field(1,1,'GRAVITY_NEPTUNE', 'float'),
  \ javaapi#field(1,1,'GRAVITY_PLUTO', 'float'),
  \ javaapi#field(1,1,'GRAVITY_DEATH_STAR_I', 'float'),
  \ javaapi#field(1,1,'GRAVITY_THE_ISLAND', 'float'),
  \ javaapi#field(1,1,'MAGNETIC_FIELD_EARTH_MAX', 'float'),
  \ javaapi#field(1,1,'MAGNETIC_FIELD_EARTH_MIN', 'float'),
  \ javaapi#field(1,1,'PRESSURE_STANDARD_ATMOSPHERE', 'float'),
  \ javaapi#field(1,1,'LIGHT_SUNLIGHT_MAX', 'float'),
  \ javaapi#field(1,1,'LIGHT_SUNLIGHT', 'float'),
  \ javaapi#field(1,1,'LIGHT_SHADE', 'float'),
  \ javaapi#field(1,1,'LIGHT_OVERCAST', 'float'),
  \ javaapi#field(1,1,'LIGHT_SUNRISE', 'float'),
  \ javaapi#field(1,1,'LIGHT_CLOUDY', 'float'),
  \ javaapi#field(1,1,'LIGHT_FULLMOON', 'float'),
  \ javaapi#field(1,1,'LIGHT_NO_MOON', 'float'),
  \ javaapi#field(1,1,'SENSOR_DELAY_FASTEST', 'int'),
  \ javaapi#field(1,1,'SENSOR_DELAY_GAME', 'int'),
  \ javaapi#field(1,1,'SENSOR_DELAY_UI', 'int'),
  \ javaapi#field(1,1,'SENSOR_DELAY_NORMAL', 'int'),
  \ javaapi#field(1,1,'SENSOR_STATUS_UNRELIABLE', 'int'),
  \ javaapi#field(1,1,'SENSOR_STATUS_ACCURACY_LOW', 'int'),
  \ javaapi#field(1,1,'SENSOR_STATUS_ACCURACY_MEDIUM', 'int'),
  \ javaapi#field(1,1,'SENSOR_STATUS_ACCURACY_HIGH', 'int'),
  \ javaapi#field(1,1,'AXIS_X', 'int'),
  \ javaapi#field(1,1,'AXIS_Y', 'int'),
  \ javaapi#field(1,1,'AXIS_Z', 'int'),
  \ javaapi#field(1,1,'AXIS_MINUS_X', 'int'),
  \ javaapi#field(1,1,'AXIS_MINUS_Y', 'int'),
  \ javaapi#field(1,1,'AXIS_MINUS_Z', 'int'),
  \ javaapi#method(0,1,'getSensors(', ')', 'int'),
  \ javaapi#method(0,1,'getSensorList(', 'int)', 'List'),
  \ javaapi#method(0,1,'getDefaultSensor(', 'int)', 'Sensor'),
  \ javaapi#method(0,1,'registerListener(', 'SensorListener, int)', 'boolean'),
  \ javaapi#method(0,1,'registerListener(', 'SensorListener, int, int)', 'boolean'),
  \ javaapi#method(0,1,'unregisterListener(', 'SensorListener)', 'void'),
  \ javaapi#method(0,1,'unregisterListener(', 'SensorListener, int)', 'void'),
  \ javaapi#method(0,1,'unregisterListener(', 'SensorEventListener, Sensor)', 'void'),
  \ javaapi#method(0,1,'unregisterListener(', 'SensorEventListener)', 'void'),
  \ javaapi#method(0,1,'registerListener(', 'SensorEventListener, Sensor, int)', 'boolean'),
  \ javaapi#method(0,1,'registerListener(', 'SensorEventListener, Sensor, int, Handler)', 'boolean'),
  \ javaapi#method(1,1,'getRotationMatrix(', 'float[], float[], float[], float[])', 'boolean'),
  \ javaapi#method(1,1,'getInclination(', 'float[])', 'float'),
  \ javaapi#method(1,1,'remapCoordinateSystem(', 'float[], int, int, float[])', 'boolean'),
  \ javaapi#method(1,1,'getOrientation(', 'float[], float[])', 'float'),
  \ javaapi#method(1,1,'getAltitude(', 'float, float)', 'float'),
  \ javaapi#method(1,1,'getAngleChange(', 'float[], float[], float[])', 'void'),
  \ javaapi#method(1,1,'getRotationMatrixFromVector(', 'float[], float[])', 'void'),
  \ javaapi#method(1,1,'getQuaternionFromVector(', 'float[], float[])', 'void'),
  \ ])

call javaapi#class('GeomagneticField', '', [
  \ javaapi#method(0,1,'GeomagneticField(', 'float, float, float, long)', ''),
  \ javaapi#method(0,1,'getX(', ')', 'float'),
  \ javaapi#method(0,1,'getY(', ')', 'float'),
  \ javaapi#method(0,1,'getZ(', ')', 'float'),
  \ javaapi#method(0,1,'getDeclination(', ')', 'float'),
  \ javaapi#method(0,1,'getInclination(', ')', 'float'),
  \ javaapi#method(0,1,'getHorizontalStrength(', ')', 'float'),
  \ javaapi#method(0,1,'getFieldStrength(', ')', 'float'),
  \ ])

